AWSTemplateFormatVersion: '2010-09-09'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
  
  SubnetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
  
  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  
  SubnetRouteTableAssociationPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate
      RouteTableId: !Ref RouteTablePrivate
  
  SubnetRouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic

# bastion config
  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for public instance'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  
  PublicInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-007855ac798b5175e'
      InstanceType: 't2.micro'
      SubnetId: !Ref SubnetPublic
      KeyName: 'voyage-public'
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo apt-get update
        sudo apt-get upgrade
        git clone https://github.com/mateus-castro/voyage.git

# s3 bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: voyage-bucket
  
# private groups
  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for private instances'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt PublicSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt PublicSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt PublicSecurityGroup.GroupId

# private instances
  ProcessInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-007855ac798b5175e'
      InstanceType: 't2.micro'
      SubnetId: !Ref SubnetPrivate
      KeyName: 'voyage-private'
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo apt-get update
        sudo apt-get upgrade
        git clone https://github.com/mateus-castro/voyage.git

  MongoDBInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-007855ac798b5175e'
      InstanceType: 't2.micro'
      SubnetId: !Ref SubnetPrivate
      KeyName: 'voyage-private'
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo apt-get update
        sudo apt-get upgrade
        git clone https://github.com/mateus-castro/voyage.git
        sudo apt-get install -y docker.io
        docker run --name voyage-db -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=voyager -e MONGO_INITDB_ROOT_PASSWORD=dm95YWdlOnZveWFnZWFp voyage-db

  PublicInstanceEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicInstanceEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt PublicInstanceEIP.AllocationId
      InstanceId: !Ref PublicInstance

  NATEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

# route tables
  PublicInstanceRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref SubnetPublic
  
  PrivateInstanceRouteToInternet:
    Type: 'AWS::EC2::Route'
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway